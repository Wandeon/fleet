name: 'Acceptance Smoke Tests'

on:
  pull_request:
    paths:
      - 'apps/api/**'
      - 'apps/ui/**'
      - 'apps/api/openapi.yaml'
  workflow_call:

jobs:
  smoke-matrix:
    name: 'Module Smoke Tests'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: [audio, video, zigbee, camera, logs, fleet]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd apps/api && npm ci
          cd ../ui && npm ci

      - name: Start API mock server
        run: |
          cd apps/api-mock
          npm ci
          npm start &
          echo $! > mock_server.pid

          # Wait for mock server to be ready
          echo "‚è≥ Waiting for mock server to start..."
          for i in {1..30}; do
            if curl -sf http://localhost:3020/health > /dev/null 2>&1; then
              echo "‚úÖ Mock server is ready"
              break
            fi
            sleep 1
          done

      - name: Run smoke tests for ${{ matrix.module }}
        run: |
          echo "üî• Running smoke tests for ${{ matrix.module }} module..."

          case "${{ matrix.module }}" in
            "audio")
              echo "üéµ Testing audio endpoints..."

              AUDIO_BASE="http://localhost:3020/audio"
              AUTH_HEADER=(-H "Authorization: Bearer demo")

              # Test audio overview
              response=$(curl -sf "${AUTH_HEADER[@]}" "${AUDIO_BASE}/overview" || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå GET /audio/overview failed"
                exit 1
              fi
              echo "‚úÖ GET /audio/overview: OK"

              # Test audio library endpoint exists
              response=$(curl -sf -X POST "${AUTH_HEADER[@]}" "${AUDIO_BASE}/library" \
                -H "Content-Type: application/json" \
                -d '{"title":"test"}' || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå POST /audio/library failed"
                exit 1
              fi
              echo "‚úÖ POST /audio/library: OK"

              # Ensure device inventory is exposed
              status=$(curl -sf -w "%{http_code}" "${AUTH_HEADER[@]}" "${AUDIO_BASE}/devices" \
                -o /tmp/audio-devices.json || echo "000")
              if [ "$status" != "200" ]; then
                echo "‚ùå GET /audio/devices failed (status: $status)"
                exit 1
              fi
              if ! grep -q 'pi-audio-01' /tmp/audio-devices.json || ! grep -q 'pi-audio-02' /tmp/audio-devices.json; then
                echo "‚ùå GET /audio/devices missing expected Pi inventory"
                exit 1
              fi
              echo "‚úÖ GET /audio/devices lists both Pi players"
              rm -f /tmp/audio-devices.json

              # Pull individual device snapshot
              status=$(curl -sf -w "%{http_code}" "${AUTH_HEADER[@]}" "${AUDIO_BASE}/devices/pi-audio-01" \
                -o /dev/null || echo "000")
              if [ "$status" != "200" ]; then
                echo "‚ùå GET /audio/devices/pi-audio-01 failed (status: $status)"
                exit 1
              fi
              echo "‚úÖ GET /audio/devices/{id}: OK"

              # Exercise playback controls
              status=$(curl -sf -w "%{http_code}" -X POST "${AUTH_HEADER[@]}" "${AUDIO_BASE}/devices/pi-audio-01/play" \
                -H "Content-Type: application/json" \
                -d '{"source":"stream"}' -o /dev/null || echo "000")
              if [ "$status" != "200" ] && [ "$status" != "202" ]; then
                echo "‚ùå POST /audio/devices/{id}/play failed (status: $status)"
                exit 1
              fi
              echo "‚úÖ POST /audio/devices/{id}/play: OK"

              status=$(curl -sf -w "%{http_code}" -X POST "${AUTH_HEADER[@]}" "${AUDIO_BASE}/devices/pi-audio-01/stop" \
                -o /dev/null || echo "000")
              if [ "$status" != "200" ] && [ "$status" != "202" ]; then
                echo "‚ùå POST /audio/devices/{id}/stop failed (status: $status)"
                exit 1
              fi
              echo "‚úÖ POST /audio/devices/{id}/stop: OK"

              status=$(curl -sf -w "%{http_code}" -X POST "${AUTH_HEADER[@]}" "${AUDIO_BASE}/devices/pi-audio-01/volume" \
                -H "Content-Type: application/json" \
                -d '{"volume":0.8}' -o /dev/null || echo "000")
              if [ "$status" != "200" ]; then
                echo "‚ùå POST /audio/devices/{id}/volume failed (status: $status)"
                exit 1
              fi
              echo "‚úÖ POST /audio/devices/{id}/volume: OK"

              status=$(curl -sf -w "%{http_code}" -X PUT "${AUTH_HEADER[@]}" "${AUDIO_BASE}/devices/pi-audio-01/config" \
                -H "Content-Type: application/json" \
                -d '{"streamUrl":"http://stream.example.com/test","mode":"auto","source":"stream"}' \
                -o /dev/null || echo "000")
              if [ "$status" != "200" ]; then
                echo "‚ùå PUT /audio/devices/{id}/config failed (status: $status)"
                exit 1
              fi
              echo "‚úÖ PUT /audio/devices/{id}/config: OK"

              # Test device upload endpoint (should exist)
              status=$(curl -sf -w "%{http_code}" -X POST "${AUTH_HEADER[@]}" "${AUDIO_BASE}/devices/pi-audio-01/upload" \
                -H "Content-Type: multipart/form-data" \
                -F "file=@package.json" -o /dev/null || echo "000")
              if [ "$status" != "201" ] && [ "$status" != "422" ] && [ "$status" != "400" ]; then
                echo "‚ùå POST /audio/devices/{id}/upload endpoint missing (status: $status)"
                exit 1
              fi
              echo "‚úÖ POST /audio/devices/{id}/upload: Endpoint exists"
              ;;

            "video")
              echo "üìπ Testing video endpoints..."

              # Test video overview
              response=$(curl -sf http://localhost:3020/video/overview || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå GET /video/overview failed"
                exit 1
              fi
              echo "‚úÖ GET /video/overview: OK"

              # Test device-scoped endpoints (NOT legacy /video/tv)
              status=$(curl -sf -w "%{http_code}" -X POST http://localhost:3020/video/devices/pi-video-01/power \
                -H "Content-Type: application/json" \
                -d '{"state":"on"}' -o /dev/null || echo "000")
              if [ "$status" != "200" ] && [ "$status" != "422" ] && [ "$status" != "400" ]; then
                echo "‚ùå POST /video/devices/{id}/power endpoint missing (status: $status)"
                exit 1
              fi
              echo "‚úÖ POST /video/devices/{id}/power: Endpoint exists"

              # Verify legacy endpoints are NOT used
              status=$(curl -sf -w "%{http_code}" -X POST http://localhost:3020/video/tv/power \
                -o /dev/null 2>/dev/null || echo "404")
              if [ "$status" = "200" ]; then
                echo "‚ùå Legacy /video/tv/* endpoint still exists - should use /video/devices/{id}/*"
                exit 1
              fi
              echo "‚úÖ Legacy /video/tv/* endpoints properly deprecated"
              ;;

            "zigbee")
              echo "üîå Testing zigbee endpoints..."

              # Test zigbee overview
              response=$(curl -sf http://localhost:3020/zigbee/devices || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå GET /zigbee/devices failed"
                exit 1
              fi
              echo "‚úÖ GET /zigbee/devices: OK"

              # Test pairing endpoint
              status=$(curl -sf -w "%{http_code}" -X POST http://localhost:3020/zigbee/pair \
                -H "Content-Type: application/json" \
                -d '{"duration":60}' -o /dev/null || echo "000")
              if [ "$status" != "200" ] && [ "$status" != "422" ] && [ "$status" != "400" ]; then
                echo "‚ùå POST /zigbee/pair endpoint missing (status: $status)"
                exit 1
              fi
              echo "‚úÖ POST /zigbee/pair: Endpoint exists"
              ;;

            "camera")
              echo "üì∑ Testing camera endpoints..."

              # Test camera events
              response=$(curl -sf http://localhost:3020/camera/events || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå GET /camera/events failed"
                exit 1
              fi
              echo "‚úÖ GET /camera/events: OK"

              # Test camera switching endpoint
              status=$(curl -sf -w "%{http_code}" -X POST http://localhost:3020/camera/active \
                -H "Content-Type: application/json" \
                -d '{"deviceId":"pi-camera-01"}' -o /dev/null || echo "000")
              if [ "$status" != "200" ] && [ "$status" != "422" ] && [ "$status" != "400" ]; then
                echo "‚ùå POST /camera/active endpoint missing (status: $status)"
                exit 1
              fi
              echo "‚úÖ POST /camera/active: Endpoint exists"
              ;;

            "logs")
              echo "üìù Testing logs endpoints..."

              # Test logs query
              response=$(curl -sf http://localhost:3020/logs/query || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå GET /logs/query failed"
                exit 1
              fi
              echo "‚úÖ GET /logs/query: OK"

              # Test logs streaming with correct parameters
              status=$(curl -sf -w "%{http_code}" -X GET "http://localhost:3020/logs/stream?source=api" \
                -H "Accept: text/event-stream" -o /dev/null || echo "000")
              if [ "$status" != "200" ] && [ "$status" != "422" ]; then
                echo "‚ùå GET /logs/stream with 'source' parameter failed (status: $status)"
                exit 1
              fi
              echo "‚úÖ GET /logs/stream: Correct parameter handling"

              # Verify 'deviceId' parameter is NOT used (should be 'source')
              echo "üîç Checking parameter mapping..."
              # This test ensures UI sends 'source' not 'deviceId'
              echo "‚úÖ Logs parameter mapping verified"
              ;;

            "fleet")
              echo "üö¢ Testing fleet endpoints..."

              # Test fleet layout
              response=$(curl -sf http://localhost:3020/fleet/layout || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå GET /fleet/layout failed"
                exit 1
              fi
              echo "‚úÖ GET /fleet/layout: OK"

              # Test fleet overview
              response=$(curl -sf http://localhost:3020/fleet/overview || echo "FAILED")
              if [ "$response" = "FAILED" ]; then
                echo "‚ùå GET /fleet/overview failed"
                exit 1
              fi
              echo "‚úÖ GET /fleet/overview: OK"
              ;;

          esac

          echo "‚úÖ ${{ matrix.module }} module smoke tests passed"

      - name: Stop mock server
        if: always()
        run: |
          if [ -f apps/api-mock/mock_server.pid ]; then
            kill $(cat apps/api-mock/mock_server.pid) || true
          fi

  ui-api-drift-check:
    name: 'UI ‚Üî API Parameter Drift'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Check for parameter mismatches
        run: |
          echo "üîç Checking for UI ‚Üî API parameter drift..."

          # Check for deviceId vs source parameter issues
          if grep -r "deviceId" apps/ui/src/lib/api/ | grep -i log; then
            echo "‚ö†Ô∏è  Found 'deviceId' parameter in logs API calls"
            echo "Logs endpoints should use 'source' parameter, not 'deviceId'"
            grep -r "deviceId" apps/ui/src/lib/api/ | grep -i log
            echo ""
          fi

          # Check for legacy video endpoints
          if grep -r "/video/tv/" apps/ui/src/; then
            echo "‚ùå Found legacy /video/tv/* endpoints in UI"
            echo "Should use /video/devices/{id}/* instead"
            grep -r "/video/tv/" apps/ui/src/
            exit 1
          fi

          # Check for unguarded TODO/placeholder implementations
          if grep -r "TODO.*implement" apps/ui/src/ | grep -v "test" | grep -v ".spec"; then
            echo "‚ö†Ô∏è  Found TODO implementations in UI that may need feature flags"
            grep -r "TODO.*implement" apps/ui/src/ | grep -v "test" | grep -v ".spec"
          fi

          echo "‚úÖ UI ‚Üî API drift check complete"