name: 'Build and Push Images'

on:
  push:
    branches:
      - main
  workflow_call:
    outputs:
      api-image-tag:
        description: "API image tag"
        value: ${{ jobs.build-images.outputs.api-image-tag }}
      ui-image-tag:
        description: "UI image tag"
        value: ${{ jobs.build-images.outputs.ui-image-tag }}
      commit-sha:
        description: "Commit SHA"
        value: ${{ jobs.build-images.outputs.commit-sha }}

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: ${{ github.repository }}-api
  UI_IMAGE_NAME: ${{ github.repository }}-ui

jobs:
  build-images:
    name: 'Build and Push Container Images'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      api-image-tag: ${{ steps.meta-api.outputs.tags }}
      ui-image-tag: ${{ steps.meta-ui.outputs.tags }}
      commit-sha: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract API metadata
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract UI metadata
        id: meta-ui
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push UI image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/ui
          file: ./apps/ui/Dockerfile
          push: true
          tags: ${{ steps.meta-ui.outputs.tags }}
          labels: ${{ steps.meta-ui.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate deployment manifest
        run: |
          echo "ðŸ“¦ Generating deployment manifest..."

          mkdir -p artifacts

          cat > artifacts/deployment-manifest.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": {
              "sha": "${{ github.sha }}",
              "ref": "${{ github.ref }}",
              "message": $(printf '%s' '${{ github.event.head_commit.message }}' | jq -R -s .)
            },
            "images": {
              "api": {
                "registry": "${{ env.REGISTRY }}",
                "name": "${{ env.API_IMAGE_NAME }}",
                "tags": $(echo '${{ steps.meta-api.outputs.tags }}' | jq -R 'split("\n")'),
                "digest": "${{ steps.build-api.outputs.digest }}"
              },
              "ui": {
                "registry": "${{ env.REGISTRY }}",
                "name": "${{ env.UI_IMAGE_NAME }}",
                "tags": $(echo '${{ steps.meta-ui.outputs.tags }}' | jq -R 'split("\n")'),
                "digest": "${{ steps.build-ui.outputs.digest }}"
              }
            },
            "deployment": {
              "vps_compose_file": "infra/vps/compose.fleet.yml",
              "pull_commands": [
                "docker pull ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:main-${{ github.sha }}",
                "docker pull ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:main-${{ github.sha }}"
              ],
              "environment_variables": {
                "FLEET_API_IMAGE": "${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:main-${{ github.sha }}",
                "FLEET_UI_IMAGE": "${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:main-${{ github.sha }}"
              }
            }
          }
          EOF

          echo "âœ… Deployment manifest generated"
          cat artifacts/deployment-manifest.json | jq .

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: artifacts/deployment-manifest.json
          retention-days: 30

      - name: Create deployment instructions
        run: |
          echo "ðŸ“‹ Creating deployment instructions..."

          cat > artifacts/deployment-instructions.md << EOF
          # Deployment Instructions

          **Commit**: \`${{ github.sha }}\`
          **Branch**: \`${{ github.ref_name }}\`
          **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)

          ## Images Built

          ### API Image
          \`\`\`
          ${{ steps.meta-api.outputs.tags }}
          \`\`\`

          ### UI Image
          \`\`\`
          ${{ steps.meta-ui.outputs.tags }}
          \`\`\`

          ## VPS Deployment Commands

          1. **Pull new images**:
          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:main-${{ github.sha }}
          docker pull ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:main-${{ github.sha }}
          \`\`\`

          2. **Update environment variables**:
          \`\`\`bash
          export FLEET_API_IMAGE="${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:main-${{ github.sha }}"
          export FLEET_UI_IMAGE="${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}:main-${{ github.sha }}"
          \`\`\`

          3. **Deploy with compose**:
          \`\`\`bash
          cd /opt/fleet/infra/vps
          docker compose -f compose.fleet.yml pull
          docker compose -f compose.fleet.yml up -d
          \`\`\`

          4. **Verify deployment**:
          \`\`\`bash
          docker compose -f compose.fleet.yml ps
          curl -I https://app.headspamartina.hr/
          \`\`\`

          ## Rollback Instructions

          If issues occur, rollback to previous version:
          \`\`\`bash
          # Use previous image tags from last successful deployment
          docker compose -f compose.fleet.yml down
          # Update environment to previous image tags
          docker compose -f compose.fleet.yml up -d
          \`\`\`
          EOF

          echo "âœ… Deployment instructions created"

      - name: Upload deployment instructions
        uses: actions/upload-artifact@v4
        with:
          name: deployment-instructions
          path: artifacts/deployment-instructions.md
          retention-days: 30

      - name: Summary
        run: |
          echo "ðŸŽ‰ Image build and push complete!"
          echo ""
          echo "**API Image**: ${{ steps.meta-api.outputs.tags }}"
          echo "**UI Image**: ${{ steps.meta-ui.outputs.tags }}"
          echo "**Commit**: ${{ github.sha }}"
          echo ""
          echo "ðŸ“¦ Artifacts uploaded:"
          echo "- deployment-manifest.json"
          echo "- deployment-instructions.md"
          echo ""
          echo "ðŸš€ Ready for VPS deployment"