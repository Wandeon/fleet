services:
  audio-player:
    build:
      context: ./docker
      dockerfile: audio-player.Dockerfile
    restart: unless-stopped
    devices:
      - '/dev/snd:/dev/snd'
    group_add:
      - 'audio'
    environment:
      - AUDIO_OUTPUT_DEVICE=${AUDIO_OUTPUT_DEVICE:-plughw:0,0}
      - AUDIO_VOLUME=${AUDIO_VOLUME:-1.0}
      - STREAM_URL=${STREAM_URL:-${ICECAST_SCHEME:-http}://${ICECAST_HOST}:${ICECAST_PORT:-8000}/${ICECAST_MOUNT}}
      - ICECAST_SCHEME=${ICECAST_SCHEME:-http}
      - ICECAST_HOST=${ICECAST_HOST:-}
      - ICECAST_PORT=${ICECAST_PORT:-8000}
      - ICECAST_MOUNT=${ICECAST_MOUNT:-}
      - FALLBACK_FILE=${FALLBACK_FILE:-/data/fallback.mp3}
      - LOG_SERVICE=audio-player
      - LOG_ROLE=audio-player
      - LOG_COMMIT=${FLEET_LOG_COMMIT:-unknown}
    volumes:
      - audio_data:/data
    healthcheck:
      test:
        - CMD-SHELL
        - >-
          python3 - <<'PY'
          import json, os, sys, time
          path = '/data/status.json'
          if not os.path.exists(path):
              sys.exit(1)
          try:
              with open(path, 'r', encoding='utf-8') as fh:
                  data = json.load(fh)
          except Exception:
              sys.exit(1)
          mtime = os.path.getmtime(path)
          now = time.time()
          if now - mtime > 45:
              sys.exit(1)
          ts = data.get('timestamp')
          if isinstance(ts, (int, float)) and now - float(ts) > 60:
              sys.exit(1)
          sys.exit(0)
          PY
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s
    command:
      - python3
      - -u
      - /app/player.py

  audio-control:
    build:
      context: .
      dockerfile: docker/audio-control.Dockerfile
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      - CONTROL_BIND=0.0.0.0
      - CONTROL_PORT=8081
      - AUDIO_DATA_DIR=/data
      - AUTH_TOKEN=${AUDIO_CONTROL_TOKEN:-}
      - MIXER_CARD=${AUDIO_MIXER_CARD:-0}
      - MIXER_CONTROL=${AUDIO_MIXER_CONTROL:-Master}
      - STREAM_URL=${STREAM_URL:-${ICECAST_SCHEME:-http}://${ICECAST_HOST}:${ICECAST_PORT:-8000}/${ICECAST_MOUNT}}
      - AUDIO_VOLUME=${AUDIO_VOLUME:-1.0}
      - AUDIO_OUTPUT_DEVICE=${AUDIO_OUTPUT_DEVICE:-plughw:0,0}
      - LOG_SERVICE=audio-control
      - LOG_ROLE=audio-player
      - LOG_COMMIT=${FLEET_LOG_COMMIT:-unknown}
    volumes:
      - audio_data:/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "python3 - <<'PY'\nimport urllib.request,sys; urllib.request.urlopen('http://127.0.0.1:8081/healthz', timeout=2); sys.exit(0)\nPY",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command:
      - python3
      - -u
      - /app/control.py

volumes:
  audio_data: {}
