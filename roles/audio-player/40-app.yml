services:
  # Primary synchronized playback via Snapcast
  snapcast-client:
    build:
      context: .
      dockerfile: docker/snapclient.Dockerfile
    container_name: snapcast-client
    restart: unless-stopped
    devices:
      - '/dev/snd:/dev/snd'
    group_add:
      - 'audio'
    environment:
      - DEVICE_ID=${DEVICE_ID:-pi-audio-unknown}
      - SNAPCAST_SERVER=${SNAPCAST_SERVER:-}
      - AUDIO_OUTPUT_DEVICE=${AUDIO_OUTPUT_DEVICE:-plughw:0,0}
    command:
      - snapclient
      - --host=${SNAPCAST_SERVER}
      - --soundcard=${AUDIO_OUTPUT_DEVICE:-plughw:0,0}
      - --hostID=${DEVICE_ID:-pi-audio-unknown}
    healthcheck:
      test: ["CMD-SHELL", "pgrep snapclient || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - default

  # Fallback local playback (starts when Snapcast disconnected)
  audio-fallback:
    image: savonet/liquidsoap:v2.2.5
    container_name: audio-fallback
    restart: "no"  # Managed by audio-control
    devices:
      - '/dev/snd:/dev/snd'
    group_add:
      - 'audio'
    environment:
      - AUDIO_OUTPUT_DEVICE=${AUDIO_OUTPUT_DEVICE:-plughw:0,0}
    volumes:
      - ./docker/app/fallback.liq:/etc/liquidsoap/fallback.liq:ro
      - audio_data:/data
    command: ["/etc/liquidsoap/fallback.liq"]
    healthcheck:
      test: ["CMD-SHELL", "pgrep liquidsoap || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - default

  # Control API with Snapcast monitoring and mode switching
  audio-control:
    build:
      context: .
      dockerfile: docker/audio-control.Dockerfile
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      - CONTROL_BIND=0.0.0.0
      - CONTROL_PORT=8081
      - AUDIO_DATA_DIR=/data
      - AUTH_TOKEN=${AUDIO_CONTROL_TOKEN:-}
      - DEVICE_ID=${DEVICE_ID:-pi-audio-unknown}
      - SNAPCAST_SERVER=${SNAPCAST_SERVER:-}
      - AUDIO_VOLUME=${AUDIO_VOLUME:-0.0}
      - AUDIO_OUTPUT_DEVICE=${AUDIO_OUTPUT_DEVICE:-plughw:0,0}
      - LOG_SERVICE=audio-control
      - LOG_ROLE=audio-player
      - LOG_COMMIT=${FLEET_LOG_COMMIT:-unknown}
    volumes:
      - audio_data:/data
      - /var/run/docker.sock:/var/run/docker.sock  # For container management
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "python3 - <<'PY'\nimport urllib.request,sys; urllib.request.urlopen('http://127.0.0.1:8081/healthz', timeout=2); sys.exit(0)\nPY",
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command:
      - python3
      - -u
      - /app/control_snapcast.py
    networks:
      - default

volumes:
  audio_data: {}

networks:
  default:
    name: audio-network
    driver: bridge
