openapi: 3.0.3
info:
  title: Fleet Control API
  version: 0.2.3
  description: |
    Public web API consumed by the Fleet web UI. The API aggregates multiple
    device roles (audio players, video/CEC, Zigbee, cameras) and exposes a
    consistent contract for UI integrations. Schemas align with the live device
    capabilities matrix to ensure client compatibility.
  contact:
    name: Fleet Platform Team
    email: platform@fleet.example
servers:
  - url: /api
security:
  - bearerAuth: []
tags:
  - name: Fleet
    description: Fleet device summary and per-device detail endpoints.
  - name: Audio
    description: Distributed audio player control, playlist, and playback endpoints.
  - name: Video
    description: TV control, live preview, and recording timelines.
  - name: Zigbee
    description: Zigbee lighting, pairing, and quick action orchestration.
  - name: Camera
    description: Camera health summaries, event feeds, and clip generation.
  - name: Logs
    description: Operator log viewing and streaming diagnostics.
  - name: Settings
    description: Control plane configuration, pairing, and operator management.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  headers:
    CorrelationId:
      description: Correlation identifier for tracing requests end-to-end.
      schema:
        type: string
    RateLimitLimit:
      description: Maximum number of requests allowed in the current window.
      schema:
        type: integer
        format: int32
    RateLimitRemaining:
      description: Remaining requests in the current window.
      schema:
        type: integer
        format: int32
    RetryAfterSeconds:
      description: Seconds until clients may retry after a 429 response.
      schema:
        type: integer
        format: int32
  parameters:
    LimitParam:
      name: limit
      in: query
      description: Maximum number of results to return.
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 200
        default: 50
    CursorParam:
      name: cursor
      in: query
      description: Opaque pagination cursor returned by previous responses.
      schema:
        type: string
    LogLevelParam:
      name: level
      in: query
      description: Filter log entries to a specific severity level.
      schema:
        type: string
        enum:
          - trace
          - debug
          - info
          - warn
          - error
          - fatal
    LogSourceParam:
      name: source
      in: query
      description: Limit log entries to a specific source identifier.
      schema:
        type: string
    LogSearchParam:
      name: q
      in: query
      description: Free-text search filter applied to message and context fields.
      schema:
        type: string
    LogsStreamAccept:
      name: accept
      in: header
      required: false
      schema:
        type: string
      example: text/event-stream
  responses:
    UnauthorizedError:
      description: Authentication failed or credentials missing.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            default:
              value:
                code: UNAUTHENTICATED
                message: Authentication token missing or invalid.
                correlationId: 00000000-0000-0000-0000-000000000000
    ForbiddenError:
      description: Authenticated user does not have permission to access the resource.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: Requested resource does not exist.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: One or more request parameters failed validation.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid:
              value:
                code: INVALID_REQUEST
                message: Provided payload failed validation.
                correlationId: 11111111-1111-1111-1111-111111111111
    RateLimitError:
      description: Request rate limit exceeded.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
        x-ratelimit-limit:
          $ref: '#/components/headers/RateLimitLimit'
        x-ratelimit-remaining:
          $ref: '#/components/headers/RateLimitRemaining'
        retry-after:
          $ref: '#/components/headers/RetryAfterSeconds'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadGatewayError:
      description: Upstream device returned an invalid response or is unreachable.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GatewayTimeoutError:
      description: Upstream device timed out while processing the request.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Unexpected server error occurred.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplementedError:
      description: Endpoint contract defined but backend implementation is pending.
      headers:
        x-correlation-id:
          $ref: '#/components/headers/CorrelationId'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      required:
        - code
        - message
        - correlationId
      properties:
        code:
          type: string
          description: Machine-readable error code.
        message:
          type: string
          description: Human-readable summary of the error.
        hint:
          type: string
          nullable: true
          description: Optional client-facing recommendation.
        correlationId:
          type: string
          format: uuid
          description: Correlates the request across systems.
        details:
          type: object
          nullable: true
          additionalProperties: true
          description: Additional contextual information for debugging.
    DeviceStatus:
      type: string
      description: Standard device status values aligned with the device capabilities matrix.
      enum:
        - online
        - offline
        - error
        - degraded
    AudioPlaybackStateName:
      type: string
      enum:
        - idle
        - playing
        - paused
        - buffering
        - error
    AudioSyncMode:
      type: string
      enum:
        - independent
        - synced
        - grouped
    AudioDevicePlayback:
      type: object
      required:
        - state
        - positionSeconds
        - durationSeconds
        - startedAt
        - syncGroup
      properties:
        state:
          $ref: '#/components/schemas/AudioPlaybackStateName'
        trackId:
          type: string
          nullable: true
        trackTitle:
          type: string
          nullable: true
        playlistId:
          type: string
          nullable: true
        positionSeconds:
          type: number
          format: float
          minimum: 0
        durationSeconds:
          type: number
          format: float
          minimum: 0
        startedAt:
          type: string
          format: date-time
          nullable: true
        syncGroup:
          type: string
          nullable: true
        lastError:
          type: string
          nullable: true
    AudioDeviceSnapshot:
      type: object
      required:
        - id
        - name
        - status
        - volumePercent
        - capabilities
        - playback
        - lastUpdated
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        group:
          type: string
          nullable: true
        volumePercent:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          description: Percent-based volume control, aligned with 1 dB steps in Pi devices.
        capabilities:
          type: array
          description: Capabilities exposed by the device. Values map to the live device capabilities matrix.
          items:
            type: string
          example:
            - playback
            - seek
            - sync
            - upload
        playback:
          $ref: '#/components/schemas/AudioDevicePlayback'
        lastUpdated:
          type: string
          format: date-time
        fallbackExists:
          type: boolean
          description: Indicates whether a fallback file is currently stored on the device.
    AudioLibraryTrack:
      type: object
      required:
        - id
        - title
        - durationSeconds
        - format
        - uploadedAt
      properties:
        id:
          type: string
        title:
          type: string
        artist:
          type: string
          nullable: true
        durationSeconds:
          type: number
          format: float
          minimum: 0
        format:
          type: string
          description: Media container or codec (e.g. MP3, AAC, FLAC) supported per the device matrix.
        sizeBytes:
          type: integer
          format: int64
          nullable: true
        tags:
          type: array
          items:
            type: string
        uploadedAt:
          type: string
          format: date-time
    AudioPlaylistTrack:
      type: object
      required:
        - trackId
        - order
      properties:
        trackId:
          type: string
        order:
          type: integer
          format: int32
          minimum: 0
        startOffsetSeconds:
          type: number
          format: float
          minimum: 0
          nullable: true
        deviceOverrides:
          type: object
          additionalProperties:
            type: string
          nullable: true
    AudioPlaylist:
      type: object
      required:
        - id
        - name
        - loop
        - syncMode
        - createdAt
        - updatedAt
        - tracks
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        loop:
          type: boolean
        syncMode:
          $ref: '#/components/schemas/AudioSyncMode'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/AudioPlaylistTrack'
    AudioSession:
      type: object
      required:
        - id
        - deviceIds
        - syncMode
        - state
        - startedAt
      properties:
        id:
          type: string
        playlistId:
          type: string
          nullable: true
        trackId:
          type: string
          nullable: true
        deviceIds:
          type: array
          items:
            type: string
        syncMode:
          $ref: '#/components/schemas/AudioSyncMode'
        state:
          type: string
          enum:
            - preparing
            - playing
            - paused
            - completed
            - error
        startedAt:
          type: string
          format: date-time
        lastError:
          type: string
          nullable: true
        drift:
          $ref: '#/components/schemas/AudioSessionDrift'
    AudioState:
      type: object
      required:
        - masterVolume
        - devices
        - library
        - playlists
        - sessions
      properties:
        masterVolume:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
        devices:
          type: array
          items:
            $ref: '#/components/schemas/AudioDeviceSnapshot'
        library:
          type: array
          items:
            $ref: '#/components/schemas/AudioLibraryTrack'
        playlists:
          type: array
          items:
            $ref: '#/components/schemas/AudioPlaylist'
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/AudioSession'
        message:
          type: string
          nullable: true
    AudioPlaybackAssignment:
      type: object
      required:
        - deviceId
        - trackId
      properties:
        deviceId:
          type: string
        trackId:
          type: string
        startOffsetSeconds:
          type: number
          format: float
          minimum: 0
          nullable: true
    AudioPlaybackRequest:
      type: object
      required:
        - deviceIds
        - syncMode
      properties:
        deviceIds:
          type: array
          items:
            type: string
        playlistId:
          type: string
          nullable: true
        trackId:
          type: string
          nullable: true
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/AudioPlaybackAssignment'
    AudioPlaybackSessionCreateRequest:
      allOf:
        - $ref: '#/components/schemas/AudioPlaybackRequest'
        - type: object
          properties:
            label:
              type: string
              description: Optional session label displayed in operator UI.
              nullable: true
    AudioPlaylistReorderRequest:
      type: object
      required:
        - ordering
      properties:
        ordering:
          type: array
          items:
            type: object
            required:
              - trackId
              - position
            properties:
              trackId:
                type: string
              position:
                type: integer
                format: int32
                minimum: 0
    AudioSessionSyncRequest:
      type: object
      required:
        - referenceTimestamp
        - maxDriftSeconds
        - perDevice
      properties:
        referenceTimestamp:
          type: string
          format: date-time
        maxDriftSeconds:
          type: number
          format: float
        perDevice:
          type: object
          additionalProperties:
            type: number
            format: float
        correctionsApplied:
          type: boolean
    AudioSessionDrift:
      type: object
      required:
        - maxDriftSeconds
        - perDevice
      properties:
        referenceTimestamp:
          type: string
          format: date-time
          nullable: true
        maxDriftSeconds:
          type: number
          format: float
        perDevice:
          type: object
          additionalProperties:
            type: number
            format: float
        correctionsApplied:
          type: boolean
    AudioLibraryUploadRegistrationRequest:
      type: object
      required:
        - filename
      properties:
        filename:
          type: string
        contentType:
          type: string
          default: application/octet-stream
        sizeBytes:
          type: integer
          format: int64
          minimum: 0
        title:
          type: string
          nullable: true
        artist:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
    AudioLibraryUploadRegistration:
      type: object
      required:
        - uploadId
        - filename
        - contentType
        - uploadUrl
        - expiresAt
      properties:
        uploadId:
          type: string
        filename:
          type: string
        contentType:
          type: string
        sizeBytes:
          type: integer
          format: int64
          nullable: true
        title:
          type: string
          nullable: true
        artist:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties:
            type: string
          nullable: true
        uploadUrl:
          type: string
          format: uri
        expiresAt:
          type: string
          format: date-time
    AudioDeviceUploadResponse:
      type: object
      required:
        - deviceId
        - saved
        - path
        - fallbackExists
      properties:
        deviceId:
          type: string
          description: Identifier of the audio device that processed the upload.
        saved:
          type: boolean
          description: Indicates whether the device persisted the uploaded file.
        path:
          type: string
          description: Absolute path reported by the device for the stored fallback asset.
        fallbackExists:
          type: boolean
          description: Flag reflecting whether the device reports an on-disk fallback file after the upload.
        status:
          type: object
          description: Raw status payload returned from the device following the upload.
          required:
            - stream_url
            - volume
            - mode
            - source
            - fallback_exists
          properties:
            stream_url:
              type: string
            volume:
              type: number
            mode:
              type: string
              enum:
                - auto
                - manual
            source:
              type: string
              enum:
                - stream
                - file
                - stop
            fallback_exists:
              type: boolean
        fields:
          type: object
          additionalProperties:
            type: string
        syncMode:
          $ref: '#/components/schemas/AudioSyncMode'
        resume:
          type: boolean
          default: false
        startAtSeconds:
          type: number
          format: float
          minimum: 0
          default: 0
        loop:
          type: boolean
          default: false
    AudioSeekRequest:
      type: object
      required:
        - positionSeconds
      properties:
        positionSeconds:
          type: number
          format: float
          minimum: 0
    AudioVolumeRequest:
      type: object
      required:
        - volume
      properties:
        volume:
          type: number
          format: float
          minimum: 0
          maximum: 2
          description: Normalised volume between 0.0 and 2.0 (inclusive).
    AudioMasterVolumeRequest:
      type: object
      required:
        - volumePercent
      properties:
        volumePercent:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
    VideoPowerState:
      type: string
      enum:
        - on
        - standby
    VideoPreviewSession:
      type: object
      required:
        - sessionId
        - streamUrl
        - expiresAt
      properties:
        sessionId:
          type: string
        streamUrl:
          type: string
          format: uri
        expiresAt:
          type: string
          format: date-time
        device:
          type: object
          nullable: true
          properties:
            id:
              type: string
            name:
              type: string
            input:
              type: string
    VideoClipExport:
      type: object
      required:
        - exportId
        - recordingId
        - status
        - startOffsetSeconds
        - endOffsetSeconds
        - requestedAt
        - downloadUrl
      properties:
        exportId:
          type: string
        recordingId:
          type: string
        status:
          type: string
          enum:
            - queued
            - processing
            - complete
            - failed
        startOffsetSeconds:
          type: number
          format: float
        endOffsetSeconds:
          type: number
          format: float
        requestedAt:
          type: string
          format: date-time
        downloadUrl:
          type: string
          format: uri
    VideoRecordingSegment:
      type: object
      required:
        - id
        - deviceId
        - startedAt
        - endedAt
        - durationSeconds
        - status
      properties:
        id:
          type: string
        deviceId:
          type: string
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
        durationSeconds:
          type: integer
          format: int32
        status:
          type: string
          enum:
            - available
            - processing
            - failed
    VideoPlaybackState:
      type: object
      required:
        - status
        - source
        - startedAt
      properties:
        status:
          type: string
          enum:
            - idle
            - playing
            - paused
            - stopped
        source:
          type: string
          nullable: true
        startedAt:
          type: string
          format: date-time
          nullable: true
    VideoDeviceState:
      type: object
      required:
        - id
        - name
        - module
        - role
        - status
        - power
        - mute
        - input
        - volumePercent
        - availableInputs
        - playback
        - busy
        - lastUpdated
      properties:
        id:
          type: string
        name:
          type: string
        module:
          type: string
        role:
          type: string
        status:
          type: string
        power:
          $ref: '#/components/schemas/VideoPowerState'
        mute:
          type: boolean
        input:
          type: string
        volumePercent:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
        availableInputs:
          type: array
          items:
            type: string
        playback:
          $ref: '#/components/schemas/VideoPlaybackState'
        busy:
          type: boolean
        lastJobId:
          type: string
          nullable: true
        lastUpdated:
          type: string
          format: date-time
    VideoJobAcknowledgement:
      type: object
      required:
        - deviceId
        - lastUpdated
        - jobId
        - accepted
      properties:
        deviceId:
          type: string
        lastUpdated:
          type: string
          format: date-time
        jobId:
          type: string
        accepted:
          type: boolean
    VideoOverview:
      type: object
      required:
        - devices
        - total
        - online
        - updatedAt
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/VideoDeviceState'
        total:
          type: integer
          format: int32
        online:
          type: integer
          format: int32
        updatedAt:
          type: string
          format: date-time
    VideoPreviewRequest:
      type: object
      properties:
        deviceId:
          type: string
          description: Target video node for generating the preview stream.
    ZigbeeDevice:
      type: object
      required:
        - id
        - name
        - type
        - state
        - lastSeen
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        state:
          type: string
          enum:
            - open
            - closed
            - active
            - inactive
        lastSeen:
          type: string
          format: date-time
        battery:
          type: integer
          format: int32
          nullable: true
    ZigbeePairingCandidate:
      type: object
      required:
        - id
        - model
        - manufacturer
        - signal
        - lastSeen
      properties:
        id:
          type: string
        model:
          type: string
        manufacturer:
          type: string
        signal:
          type: integer
          format: int32
        lastSeen:
          type: string
          format: date-time
    ZigbeePairingState:
      type: object
      required:
        - active
        - discovered
      properties:
        active:
          type: boolean
        startedAt:
          type: string
          format: date-time
          nullable: true
        expiresAt:
          type: string
          format: date-time
          nullable: true
        discovered:
          type: array
          items:
            $ref: '#/components/schemas/ZigbeePairingCandidate'
        confirmed:
          type: array
          items:
            type: string
    ZigbeeState:
      type: object
      required:
        - devices
        - hub
        - pairing
        - rules
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/ZigbeeDevice'
        hub:
          type: object
          required:
            - id
            - status
            - channel
            - lastHeartbeatAt
          properties:
            id:
              type: string
            status:
              type: string
            channel:
              type: integer
              format: int32
            lastHeartbeatAt:
              type: string
              format: date-time
        pairing:
          $ref: '#/components/schemas/ZigbeePairingState'
        rules:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - enabled
              - createdAt
              - updatedAt
            properties:
              id:
                type: string
              name:
                type: string
              enabled:
                type: boolean
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
    ZigbeeActionRequest:
      type: object
      required:
        - deviceId
        - command
      properties:
        deviceId:
          type: string
        command:
          type: string
        payload:
          type: object
          additionalProperties:
            type: string
    ZigbeePairingStartRequest:
      type: object
      properties:
        durationSeconds:
          type: integer
          format: int32
          minimum: 5
          maximum: 900
    ZigbeeRuleCondition:
      type: object
      required:
        - field
        - operator
        - value
      properties:
        field:
          type: string
          description: JSON pointer-style path evaluated against the trigger context payload.
        operator:
          type: string
          enum:
            - eq
            - neq
            - gt
            - gte
            - lt
            - lte
            - includes
            - excludes
        value:
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
    ZigbeeRuleSensorTrigger:
      type: object
      required:
        - type
        - sensorId
        - event
      properties:
        type:
          type: string
          enum:
            - sensor_event
        sensorId:
          type: string
        event:
          type: string
        condition:
          $ref: '#/components/schemas/ZigbeeRuleCondition'
        cooldownSeconds:
          type: integer
          format: int32
          minimum: 0
          maximum: 86400
    ZigbeeRuleScheduleTrigger:
      type: object
      required:
        - type
        - cron
      properties:
        type:
          type: string
          enum:
            - schedule
        cron:
          type: string
          description: Cron expression evaluated by the hub scheduler.
        timezone:
          type: string
          description: IANA timezone identifier used for the cron expression.
    ZigbeeRuleExpressionTrigger:
      type: object
      required:
        - type
        - expression
      properties:
        type:
          type: string
          enum:
            - expression
        expression:
          type: string
          description: JavaScript expression evaluated in the automation sandbox.
        language:
          type: string
          enum:
            - js
          default: js
        description:
          type: string
    ZigbeeRuleTrigger:
      oneOf:
        - $ref: '#/components/schemas/ZigbeeRuleSensorTrigger'
        - $ref: '#/components/schemas/ZigbeeRuleScheduleTrigger'
        - $ref: '#/components/schemas/ZigbeeRuleExpressionTrigger'
      discriminator:
        propertyName: type
    ZigbeeRuleDeviceCommandAction:
      type: object
      required:
        - type
        - deviceId
        - command
      properties:
        type:
          type: string
          enum:
            - device_command
        deviceId:
          type: string
        command:
          type: string
        payload:
          type: object
          additionalProperties: {}
    ZigbeeRuleNotifyAction:
      type: object
      required:
        - type
        - channel
        - message
      properties:
        type:
          type: string
          enum:
            - notify
        channel:
          type: string
          enum:
            - slack
            - email
            - sms
        message:
          type: string
        metadata:
          type: object
          additionalProperties: {}
    ZigbeeRuleDelayAction:
      type: object
      required:
        - type
        - durationSeconds
      properties:
        type:
          type: string
          enum:
            - delay
        durationSeconds:
          type: integer
          format: int32
          minimum: 1
          maximum: 3600
    ZigbeeRuleAction:
      oneOf:
        - $ref: '#/components/schemas/ZigbeeRuleDeviceCommandAction'
        - $ref: '#/components/schemas/ZigbeeRuleNotifyAction'
        - $ref: '#/components/schemas/ZigbeeRuleDelayAction'
      discriminator:
        propertyName: type
    ZigbeeRuleDefinition:
      type: object
      required:
        - name
        - trigger
        - actions
      properties:
        name:
          type: string
        description:
          type: string
        trigger:
          $ref: '#/components/schemas/ZigbeeRuleTrigger'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ZigbeeRuleAction'
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: {}
        enabled:
          type: boolean
    ZigbeeRuleUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        trigger:
          $ref: '#/components/schemas/ZigbeeRuleTrigger'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ZigbeeRuleAction'
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: {}
        enabled:
          type: boolean
    ZigbeeRule:
      allOf:
        - $ref: '#/components/schemas/ZigbeeRuleDefinition'
        - type: object
          required:
            - id
            - createdAt
            - updatedAt
            - enabled
          properties:
            id:
              type: string
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            description:
              type: string
              nullable: true
            metadata:
              type: object
              additionalProperties: {}
            tags:
              type: array
              items:
                type: string
    ZigbeeRuleListResponse:
      type: object
      required:
        - items
        - total
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ZigbeeRule'
        total:
          type: integer
          format: int32
    ZigbeeRuleSimulationEvaluation:
      type: object
      required:
        - triggerType
        - reason
        - startedAt
        - completedAt
        - durationMs
      properties:
        triggerType:
          type: string
        reason:
          type: string
        error:
          type: string
          nullable: true
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        durationMs:
          type: integer
          format: int32
    ZigbeeRuleSimulationRequest:
      type: object
      properties:
        ruleId:
          type: string
        definition:
          $ref: '#/components/schemas/ZigbeeRuleDefinition'
        input:
          type: object
          additionalProperties: {}
      oneOf:
        - required:
            - ruleId
        - required:
            - definition
      description: Provide either an existing ruleId or a full definition to simulate.
    ZigbeeRuleSimulationResponse:
      type: object
      required:
        - matched
        - actions
        - rule
        - evaluation
      properties:
        matched:
          type: boolean
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ZigbeeRuleAction'
        rule:
          $ref: '#/components/schemas/ZigbeeRule'
        evaluation:
          $ref: '#/components/schemas/ZigbeeRuleSimulationEvaluation'
    ZigbeeRuleValidationResponse:
      type: object
      required:
        - valid
        - normalized
        - evaluatedAt
      properties:
        valid:
          type: boolean
        normalized:
          $ref: '#/components/schemas/ZigbeeRuleDefinition'
        evaluatedAt:
          type: string
          format: date-time
    CameraEvent:
      type: object
      required:
        - id
        - cameraId
        - cameraName
        - timestamp
        - type
        - severity
        - confidence
        - tags
        - clipAvailable
        - acknowledged
      properties:
        id:
          type: string
        cameraId:
          type: string
        cameraName:
          type: string
        timestamp:
          type: string
          format: date-time
        type:
          type: string
        severity:
          type: string
          enum:
            - info
            - warning
            - critical
        confidence:
          type: number
          format: float
        tags:
          type: array
          items:
            type: string
        thumbnailUrl:
          type: string
          format: uri
          nullable: true
        clipUrl:
          type: string
          format: uri
          nullable: true
        clipAvailable:
          type: boolean
        acknowledged:
          type: boolean
        acknowledgedAt:
          type: string
          format: date-time
          nullable: true
    CameraEventClip:
      type: object
      required:
        - url
        - expiresAt
        - durationSeconds
        - format
      properties:
        url:
          type: string
          format: uri
          nullable: true
        expiresAt:
          type: string
          format: date-time
          nullable: true
        durationSeconds:
          type: integer
          format: int32
          nullable: true
        format:
          type: string
          nullable: true
    CameraEventDetail:
      allOf:
        - $ref: '#/components/schemas/CameraEvent'
        - type: object
          required:
            - metadata
            - clip
          properties:
            metadata:
              type: object
              additionalProperties: true
            clip:
              $ref: '#/components/schemas/CameraEventClip'
    CameraEventListResponse:
      type: object
      required:
        - events
        - pagination
        - generatedAt
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/CameraEvent'
        pagination:
          type: object
          required:
            - total
            - limit
            - hasMore
          properties:
            total:
              type: integer
              format: int32
            limit:
              type: integer
              format: int32
            nextCursor:
              type: string
              nullable: true
            hasMore:
              type: boolean
        filters:
          type: object
          nullable: true
          properties:
            cameraId:
              type: string
              nullable: true
            start:
              type: string
              format: date-time
              nullable: true
            end:
              type: string
              format: date-time
              nullable: true
            tags:
              type: array
              items:
                type: string
            minConfidence:
              type: number
              format: float
              nullable: true
            maxConfidence:
              type: number
              format: float
              nullable: true
        generatedAt:
          type: string
          format: date-time
    CameraEventDetailResponse:
      type: object
      required:
        - event
        - retrievedAt
      properties:
        event:
          $ref: '#/components/schemas/CameraEventDetail'
        retrievedAt:
          type: string
          format: date-time
    CameraDevice:
      type: object
      required:
        - id
        - name
        - status
        - lastHeartbeat
        - capabilities
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        location:
          type: string
          nullable: true
        streamUrl:
          type: string
          format: uri
          nullable: true
        stillUrl:
          type: string
          format: uri
          nullable: true
        lastHeartbeat:
          type: string
          format: date-time
        capabilities:
          type: array
          description: Capabilities correspond to AI camera features documented in the device matrix.
          items:
            type: string
    CameraClip:
      type: object
      required:
        - id
        - cameraId
        - start
        - end
        - url
      properties:
        id:
          type: string
        cameraId:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        thumbnailUrl:
          type: string
          format: uri
          nullable: true
        label:
          type: string
          nullable: true
    CameraPreviewState:
      type: object
      required:
        - cameraId
        - status
        - posterUrl
        - streamUrl
        - updatedAt
      properties:
        cameraId:
          type: string
          nullable: true
        status:
          type: string
          enum:
            - ready
            - pending
            - unavailable
        posterUrl:
          type: string
          format: uri
          nullable: true
        streamUrl:
          type: string
          format: uri
          nullable: true
        reason:
          type: string
          nullable: true
        updatedAt:
          type: string
          format: date-time
    CameraOverviewSummary:
      type: object
      required:
        - status
        - updatedAt
        - reason
        - cameras
      properties:
        status:
          type: string
          enum:
            - online
            - offline
            - degraded
        updatedAt:
          type: string
          format: date-time
        reason:
          type: string
          nullable: true
        cameras:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - status
            properties:
              id:
                type: string
              name:
                type: string
              status:
                type: string
                enum:
                  - online
                  - offline
                  - degraded
              lastSeen:
                type: string
                format: date-time
                nullable: true
              reason:
                type: string
                nullable: true
    CameraState:
      type: object
      required:
        - activeCameraId
        - devices
        - events
        - clips
        - overview
      properties:
        activeCameraId:
          type: string
          nullable: true
        devices:
          type: array
          items:
            $ref: '#/components/schemas/CameraDevice'
        events:
          type: array
          items:
            $ref: '#/components/schemas/CameraEvent'
        clips:
          type: array
          items:
            $ref: '#/components/schemas/CameraClip'
        overview:
          type: object
          required:
            - previewImage
            - streamUrl
            - lastMotion
            - health
            - updatedAt
          properties:
            previewImage:
              type: string
              format: uri
              nullable: true
            streamUrl:
              type: string
              format: uri
              nullable: true
            lastMotion:
              type: string
              format: date-time
              nullable: true
            health:
              $ref: '#/components/schemas/DeviceStatus'
            updatedAt:
              type: string
              format: date-time
              nullable: true
        summary:
          type: object
          allOf:
            - $ref: '#/components/schemas/CameraOverviewSummary'
          nullable: true
          description: Optional roll-up of camera health for quick status review.
        preview:
          type: object
          allOf:
            - $ref: '#/components/schemas/CameraPreviewState'
          nullable: true
          description: Preview metadata for the active camera if a live preview exists.
    CameraSelectionRequest:
      type: object
      required:
        - cameraId
      properties:
        cameraId:
          type: string
    CameraClipRequest:
      type: object
      required:
        - cameraId
      properties:
        cameraId:
          type: string
    CameraClipResponse:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
    LogEntry:
      type: object
      required:
        - timestamp
        - message
        - level
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          type: string
          enum:
            - trace
            - debug
            - info
            - warn
            - error
            - fatal
        message:
          type: string
        meta:
          type: object
          nullable: true
          additionalProperties:
            type: string
        correlationId:
          type: string
          nullable: true
        context:
          type: object
          nullable: true
          additionalProperties: true
    LogSource:
      type: object
      required:
        - id
        - label
        - kind
      properties:
        id:
          type: string
        label:
          type: string
        description:
          type: string
          nullable: true
        kind:
          type: string
          enum:
            - device
            - service
            - system
            - group
        module:
          type: string
          nullable: true
        deviceId:
          type: string
          nullable: true
        active:
          type: boolean
          nullable: true
    LogsSnapshot:
      type: object
      required:
        - entries
        - lastUpdated
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
        sources:
          type: array
          items:
            $ref: '#/components/schemas/LogSource'
        cursor:
          type: string
          nullable: true
        lastUpdated:
          type: string
          format: date-time
    LogsExportRequest:
      type: object
      properties:
        deviceId:
          type: string
        level:
          type: string
          enum:
            - trace
            - debug
            - info
            - warn
            - error
            - fatal
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        format:
          type: string
          enum:
            - json
            - csv
          default: json
    LogsExportResponse:
      type: object
      required:
        - exportId
        - status
        - format
        - filters
        - requestedAt
        - estimatedReadyAt
        - downloadUrl
      properties:
        exportId:
          type: string
        status:
          type: string
          enum:
            - queued
            - processing
            - completed
            - failed
        format:
          type: string
          enum:
            - json
            - csv
        filters:
          type: object
          properties:
            deviceId:
              type: string
              nullable: true
            level:
              type: string
              nullable: true
            start:
              type: string
              format: date-time
              nullable: true
            end:
              type: string
              format: date-time
              nullable: true
        requestedAt:
          type: string
          format: date-time
        estimatedReadyAt:
          type: string
          format: date-time
        downloadUrl:
          type: string
          format: uri
        correlationId:
          type: string
          nullable: true
    ProxySettings:
      type: object
      required:
        - upstreamUrl
        - authMode
        - heartbeatIntervalSeconds
      properties:
        upstreamUrl:
          type: string
          format: uri
        authMode:
          type: string
          enum:
            - none
            - basic
            - token
        heartbeatIntervalSeconds:
          type: integer
          format: int32
          minimum: 5
    ProxySettingsPatch:
      type: object
      properties:
        upstreamUrl:
          type: string
          format: uri
        authMode:
          type: string
          enum:
            - none
            - basic
            - token
        heartbeatIntervalSeconds:
          type: integer
          format: int32
          minimum: 5
          maximum: 3600
    SettingsPairingState:
      type: object
      required:
        - active
        - expiresAt
        - ticketId
        - candidates
      properties:
        active:
          type: boolean
        expiresAt:
          type: string
          format: date-time
          nullable: true
        ticketId:
          type: string
          nullable: true
        candidates:
          type: array
          items:
            type: object
            required:
              - id
              - model
              - signal
            properties:
              id:
                type: string
              model:
                type: string
              signal:
                type: integer
                format: int32
    OperatorRole:
      type: string
      enum:
        - admin
        - automation
        - viewer
        - incident
        - security
    OperatorAccount:
      type: object
      required:
        - id
        - email
        - roles
        - invitedAt
        - status
        - lastUpdatedAt
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/OperatorRole'
        invitedAt:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum:
            - active
            - pending
            - suspended
        lastUpdatedAt:
          type: string
          format: date-time
    SettingsState:
      type: object
      required:
        - proxy
        - allowedOrigins
        - pairing
        - operators
        - apiTokenPreview
        - security
        - updatedAt
      properties:
        proxy:
          $ref: '#/components/schemas/ProxySettings'
        allowedOrigins:
          type: array
          items:
            type: string
        pairing:
          $ref: '#/components/schemas/SettingsPairingState'
        operators:
          type: array
          items:
            $ref: '#/components/schemas/OperatorAccount'
        apiTokenPreview:
          type: string
        security:
          $ref: '#/components/schemas/SecuritySettings'
        updatedAt:
          type: string
          format: date-time
          nullable: true
    ProxyUpdateRequest:
      type: object
      required:
        - proxy
      properties:
        proxy:
          $ref: '#/components/schemas/ProxySettingsPatch'
    AllowedOriginsRequest:
      type: object
      required:
        - origins
      properties:
        origins:
          type: array
          items:
            type: string
    PairingStartRequest:
      type: object
      required:
        - networkRole
        - expiresInSeconds
      properties:
        networkRole:
          type: string
          enum:
            - audio
            - video
            - lighting
            - sensor
        expiresInSeconds:
          type: integer
          format: int32
          minimum: 60
          maximum: 3600
    PairingClaimRequest:
      type: object
      properties:
        alias:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties:
            type: string
    InviteOperatorRequest:
      type: object
      required:
        - email
        - roles
      properties:
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/OperatorRole'
    OperatorListResponse:
      type: object
      required:
        - items
        - total
        - updatedAt
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OperatorAccount'
        total:
          type: integer
          format: int32
        updatedAt:
          type: string
          format: date-time
    OperatorUpdateRequest:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/OperatorRole'
        status:
          type: string
          enum:
            - pending
            - active
            - suspended
      minProperties: 1
    SecuritySettings:
      type: object
      required:
        - nightMode
      properties:
        nightMode:
          type: object
          required:
            - escalationEnabled
            - alertChannels
            - updatedAt
          properties:
            escalationEnabled:
              type: boolean
            alertChannels:
              type: array
              items:
                type: string
                enum:
                  - slack
                  - email
                  - sms
            updatedAt:
              type: string
              format: date-time
    SecurityUpdateRequest:
      type: object
      required:
        - nightMode
      properties:
        nightMode:
          type: object
          properties:
            escalationEnabled:
              type: boolean
            alertChannels:
              type: array
              items:
                type: string
                enum:
                  - slack
                  - email
                  - sms
    FleetDeviceMetric:
      type: object
      required:
        - id
        - label
        - value
        - status
      properties:
        id:
          type: string
        label:
          type: string
        value:
          type: string
        unit:
          type: string
          nullable: true
        status:
          type: string
          enum:
            - ok
            - warn
            - error
        trend:
          type: string
          enum:
            - up
            - down
            - steady
          nullable: true
        updatedAt:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
    FleetDeviceAction:
      type: object
      required:
        - id
        - label
        - group
        - method
        - endpoint
      properties:
        id:
          type: string
        label:
          type: string
        description:
          type: string
          nullable: true
        group:
          type: string
          enum:
            - audio
            - video
            - system
            - network
            - maintenance
        method:
          type: string
          enum:
            - POST
            - PATCH
            - DELETE
        endpoint:
          type: string
        requiresConfirmation:
          type: boolean
          nullable: true
    FleetDeviceAlert:
      type: object
      required:
        - id
        - message
        - severity
        - createdAt
        - acknowledged
      properties:
        id:
          type: string
        message:
          type: string
        severity:
          type: string
          enum:
            - info
            - warning
            - error
        createdAt:
          type: string
          format: date-time
        acknowledged:
          type: boolean
    FleetLayoutModule:
      type: object
      required:
        - id
        - displayName
        - enabled
        - capabilities
      properties:
        id:
          type: string
        displayName:
          type: string
        enabled:
          type: boolean
        description:
          type: string
          nullable: true
        capabilities:
          type: array
          items:
            type: string
    FleetLayout:
      type: object
      required:
        - updatedAt
        - modules
      properties:
        updatedAt:
          type: string
          format: date-time
        modules:
          type: array
          items:
            $ref: '#/components/schemas/FleetLayoutModule'
    FleetDeviceSummary:
      type: object
      required:
        - id
        - name
        - role
        - module
        - status
        - lastSeen
        - uptime
        - ipAddress
        - version
        - groups
        - tags
        - capabilities
      properties:
        id:
          type: string
        name:
          type: string
        role:
          type: string
        module:
          type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        location:
          type: string
          nullable: true
        lastSeen:
          type: string
          format: date-time
        uptime:
          type: string
        ipAddress:
          type: string
        version:
          type: string
        groups:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        capabilities:
          type: array
          items:
            type: string
    FleetDeviceDetail:
      type: object
      required:
        - summary
        - metrics
        - alerts
        - logs
        - actions
        - connections
      properties:
        summary:
          $ref: '#/components/schemas/FleetDeviceSummary'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/FleetDeviceMetric'
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/FleetDeviceAlert'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/FleetDeviceAction'
        connections:
          type: array
          items:
            type: object
            required:
              - name
              - status
              - lastChecked
            properties:
              name:
                type: string
              status:
                type: string
                enum:
                  - connected
                  - pending
                  - error
              lastChecked:
                type: string
                format: date-time
    FleetOverview:
      type: object
      required:
        - totals
        - modules
        - devices
        - updatedAt
      properties:
        totals:
          type: object
          required:
            - devices
            - online
            - offline
            - degraded
          properties:
            devices:
              type: integer
              format: int32
            online:
              type: integer
              format: int32
            offline:
              type: integer
              format: int32
            degraded:
              type: integer
              format: int32
        modules:
          type: array
          items:
            type: object
            required:
              - id
              - label
              - online
              - offline
              - degraded
            properties:
              id:
                type: string
              label:
                type: string
              online:
                type: integer
                format: int32
              offline:
                type: integer
                format: int32
              degraded:
                type: integer
                format: int32
        devices:
          type: array
          items:
            $ref: '#/components/schemas/FleetDeviceSummary'
        updatedAt:
          type: string
          format: date-time
paths:
  /fleet/layout:
    get:
      tags:
        - Fleet
      summary: Retrieve fleet layout metadata for UI composition.
      description: Retrieve fleet layout metadata for UI composition.
      operationId: getFleetLayout
      responses:
        '200':
          description: Fleet module layout describing enabled capabilities.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetLayout'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /fleet/overview:
    get:
      tags:
        - Fleet
      summary: Retrieve aggregate fleet status for operator dashboards.
      description: Retrieve aggregate fleet status for operator dashboards.
      operationId: getFleetOverview
      responses:
        '200':
          description: Fleet-wide module and device summary.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetOverview'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /fleet/devices/{deviceId}:
    get:
      tags:
        - Fleet
      summary: Retrieve detailed status, metrics, and actions for a fleet device.
      description: Retrieve detailed status, metrics, and actions for a fleet device.
      operationId: getFleetDeviceDetail
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed device view for operator troubleshooting.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetDeviceDetail'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /fleet/devices/{deviceId}/actions/{actionId}:
    post:
      tags:
        - Fleet
      summary: Trigger a quick action on a fleet device.
      description: Trigger a quick action on a fleet device.
      operationId: triggerFleetDeviceAction
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Action accepted for asynchronous execution.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Device is busy and cannot accept the requested action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/overview:
    get:
      tags:
        - Audio
      summary: Retrieve consolidated audio state including devices, playlists, and sessions.
      description: Retrieve consolidated audio state including devices, playlists, and sessions.
      operationId: getAudioOverview
      responses:
        '200':
          description: Audio overview payload for the operator UI.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/library:
    post:
      tags:
        - Audio
      summary: Upload a new track to the audio library.
      description: Upload a new track to the audio library.
      operationId: uploadAudioTrack
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - title
              properties:
                file:
                  type: string
                  format: binary
                title:
                  type: string
                artist:
                  type: string
                tags:
                  type: string
                  description: Comma-separated tags applied to the track.
                durationSeconds:
                  type: number
                  format: float
      responses:
        '201':
          description: Track successfully uploaded.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioLibraryTrack'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '413':
          description: Uploaded file exceeds allowed limits.
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/library/uploads:
    post:
      tags:
        - Audio
      summary: Register a pending upload for an audio library track.
      description: Register a pending upload for an audio library track. Returns signed upload parameters for the UI.
      operationId: registerAudioUpload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioLibraryUploadRegistrationRequest'
      responses:
        '201':
          description: Upload registration created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioLibraryUploadRegistration'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/playlists:
    get:
      tags:
        - Audio
      summary: List audio playlists configured for distributed playback.
      description: Retrieve ordered playlists available to the operator workspace with track metadata.
      operationId: listAudioPlaylists
      responses:
        '200':
          description: Collection of playlists.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AudioPlaylist'
                  total:
                    type: integer
                    format: int32
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
    post:
      tags:
        - Audio
      summary: Create a new audio playlist.
      description: Create a new audio playlist.
      operationId: createAudioPlaylist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioPlaylist'
      responses:
        '201':
          description: Playlist created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioPlaylist'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/playlists/{playlistId}:
    put:
      tags:
        - Audio
      summary: Update an existing audio playlist.
      description: Update an existing audio playlist.
      operationId: updateAudioPlaylist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioPlaylist'
      responses:
        '200':
          description: Updated playlist definition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioPlaylist'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/playlists/{playlistId}/reorder:
    post:
      tags:
        - Audio
      summary: Reorder tracks within a playlist without modifying metadata.
      description: Update the track ordering for an existing playlist by supplying a new ordered list of track identifiers.
      operationId: reorderAudioPlaylist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioPlaylistReorderRequest'
      responses:
        '200':
          description: Playlist reordered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioPlaylist'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - Audio
      summary: Delete an existing audio playlist.
      description: Delete an existing audio playlist.
      operationId: deleteAudioPlaylist
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Playlist removed.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/playback:
    post:
      tags:
        - Audio
      summary: Initiate playback across one or more audio devices.
      description: Initiate playback across one or more audio devices.
      operationId: startAudioPlayback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioPlaybackRequest'
      responses:
        '202':
          description: Playback request accepted.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/devices/{deviceId}:
    get:
      tags:
        - Audio
      summary: Retrieve the latest snapshot for an individual audio device.
      description: Retrieve the latest snapshot for an individual audio device.
      operationId: getAudioDevice
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Current device snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioDeviceSnapshot'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/devices/{deviceId}/pause:
    post:
      tags:
        - Audio
      summary: Pause playback on an audio device.
      description: Pause playback on an audio device.
      operationId: pauseAudioDevice
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Pause command accepted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/playback/sessions:
    get:
      tags:
        - Audio
      summary: List recent audio playback sessions and their current state.
      description: Provide historical playback session data for operators monitoring sync and device cohorts.
      operationId: listAudioPlaybackSessions
      responses:
        '200':
          description: Collection of playback sessions.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/AudioSession'
                  total:
                    type: integer
                    format: int32
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - Audio
      summary: Create and start a new coordinated playback session.
      description: Launch a playback session spanning multiple devices with optional sync and playlist configuration.
      operationId: createAudioPlaybackSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioPlaybackSessionCreateRequest'
      responses:
        '201':
          description: Session started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioSession'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/playback/sessions/{sessionId}/sync:
    post:
      tags:
        - Audio
      summary: Report drift metrics for a playback session to drive resynchronisation.
      description: Submit drift telemetry captured by the UI so the backend can record the latest synchronisation context.
      operationId: syncAudioPlaybackSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioSessionSyncRequest'
      responses:
        '202':
          description: Drift update accepted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - sessions
                  - updatedAt
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/AudioSession'
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/devices/{deviceId}/resume:
    post:
      tags:
        - Audio
      summary: Resume playback on an audio device.
      description: Resume playback on an audio device.
      operationId: resumeAudioDevice
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Resume command accepted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/devices/{deviceId}/stop:
    post:
      tags:
        - Audio
      summary: Stop playback on an audio device.
      description: Stop playback on an audio device.
      operationId: stopAudioDevice
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Stop command accepted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/devices/{deviceId}/seek:
    post:
      tags:
        - Audio
      summary: Seek to a position in the currently playing track.
      description: Seek to a position in the currently playing track.
      operationId: seekAudioDevice
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioSeekRequest'
      responses:
        '202':
          description: Seek command accepted.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/devices/{deviceId}/volume:
    post:
      tags:
        - Audio
      summary: Set the volume for an audio device.
      description: Set the volume for an audio device.
      operationId: setAudioDeviceVolume
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioVolumeRequest'
      responses:
        '202':
          description: Volume update accepted.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/devices/{deviceId}/upload:
    post:
      tags:
        - Audio
      summary: Upload a fallback audio file to an audio device.
      description: Forward a multipart upload to the target device which atomically replaces `/data/fallback.mp3`.
      operationId: uploadAudioDeviceFallback
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Fallback upload completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AudioDeviceUploadResponse'
        '400':
          description: Upload failed due to missing file or size limits.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /audio/master-volume:
    post:
      tags:
        - Audio
      summary: Set the global master volume for audio playback.
      description: Set the global master volume for audio playback.
      operationId: setAudioMasterVolume
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AudioMasterVolumeRequest'
      responses:
        '202':
          description: Master volume update accepted.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/rules:
    get:
      tags:
        - Zigbee
      summary: List Zigbee automation rules.
      description: Retrieve all configured Zigbee automation rules with trigger and action metadata.
      operationId: listZigbeeRules
      responses:
        '200':
          description: Collection of automation rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeRuleListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - Zigbee
      summary: Create a new Zigbee automation rule.
      description: Persist a Zigbee automation rule that links triggers to downstream actions.
      operationId: createZigbeeRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZigbeeRuleDefinition'
      responses:
        '201':
          description: Automation rule created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeRule'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/rules/validate:
    post:
      tags:
        - Zigbee
      summary: Validate a Zigbee automation rule definition.
      description: Validate a Zigbee automation rule definition without persisting it.
      operationId: validateZigbeeRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZigbeeRuleDefinition'
      responses:
        '200':
          description: Validation outcome.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeRuleValidationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/rules/simulate:
    post:
      tags:
        - Zigbee
      summary: Simulate execution of a Zigbee automation rule.
      description: Evaluate a Zigbee automation rule against sample trigger input within a sandbox.
      operationId: simulateZigbeeRule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZigbeeRuleSimulationRequest'
      responses:
        '200':
          description: Simulation evaluation outcome.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeRuleSimulationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/rules/{ruleId}:
    get:
      tags:
        - Zigbee
      summary: Retrieve a Zigbee automation rule.
      description: Fetch metadata for a specific Zigbee automation rule by identifier.
      operationId: getZigbeeRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Automation rule detail.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeRule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      tags:
        - Zigbee
      summary: Update a Zigbee automation rule.
      description: Replace fields on an existing Zigbee automation rule.
      operationId: updateZigbeeRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZigbeeRuleUpdateRequest'
      responses:
        '200':
          description: Updated automation rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeRule'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - Zigbee
      summary: Delete a Zigbee automation rule.
      description: Remove a Zigbee automation rule and disable associated automations.
      operationId: deleteZigbeeRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Rule deleted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/rules/{ruleId}/enable:
    patch:
      tags:
        - Zigbee
      summary: Toggle a Zigbee automation rule.
      description: Enable or disable a Zigbee automation rule without modifying other metadata.
      operationId: toggleZigbeeRule
      parameters:
        - name: ruleId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
      responses:
        '200':
          description: Updated automation rule status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeRule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/overview:
    get:
      tags:
        - Video
      summary: Retrieve consolidated video device status.
      description: Retrieve consolidated video device status.
      operationId: getVideoOverview
      responses:
        '200':
          description: Video overview for the primary display node.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoOverview'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/devices:
    get:
      tags:
        - Video
      summary: List managed video devices and their current state.
      description: Enumerate video endpoints, including power, mute, and input state for the operator dashboard.
      operationId: listVideoDevices
      responses:
        '200':
          description: Video device inventory.
          content:
            application/json:
              schema:
                type: object
                required:
                  - devices
                  - updatedAt
                properties:
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/VideoDeviceState'
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/devices/{deviceId}/power:
    post:
      tags:
        - Video
      summary: Set the power state of a video endpoint.
      description: Issue power on or standby commands to a managed display or switcher.
      operationId: setVideoPower
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - power
              properties:
                power:
                  $ref: '#/components/schemas/VideoPowerState'
      responses:
        '202':
          description: Power command accepted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VideoJobAcknowledgement'
                  - type: object
                    required:
                      - power
                    properties:
                      power:
                        $ref: '#/components/schemas/VideoPowerState'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: HDMI-CEC bus is busy and cannot accept another power command yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/devices/{deviceId}/mute:
    post:
      tags:
        - Video
      summary: Update mute state for a video device.
      description: Toggle the audio mute flag for the specified video endpoint.
      operationId: setVideoMute
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - mute
              properties:
                mute:
                  type: boolean
      responses:
        '202':
          description: Mute update accepted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VideoJobAcknowledgement'
                  - type: object
                    required:
                      - mute
                    properties:
                      mute:
                        type: boolean
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: HDMI-CEC bus is busy and cannot accept another mute command yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/devices/{deviceId}/input:
    post:
      tags:
        - Video
      summary: Switch the active input on a video device.
      description: Change the current input selection on a display or receiver.
      operationId: setVideoInput
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - input
              properties:
                input:
                  type: string
      responses:
        '202':
          description: Input change accepted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VideoJobAcknowledgement'
                  - type: object
                    required:
                      - input
                    properties:
                      input:
                        type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: HDMI-CEC bus is busy and cannot accept another input change yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/devices/{deviceId}/volume:
    post:
      tags:
        - Video
      summary: Set the output volume for a video endpoint.
      description: Adjust the HDMI output volume or amplifier gain for a managed display.
      operationId: setVideoVolume
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - volumePercent
              properties:
                volumePercent:
                  type: integer
                  minimum: 0
                  maximum: 100
      responses:
        '202':
          description: Volume update accepted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VideoJobAcknowledgement'
                  - type: object
                    required:
                      - volumePercent
                    properties:
                      volumePercent:
                        type: integer
                        minimum: 0
                        maximum: 100
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: HDMI-CEC bus is busy and cannot accept another volume change yet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/devices/{deviceId}/playback:
    post:
      tags:
        - Video
      summary: Control playback on a managed video endpoint.
      description: Issue play, pause, resume, or stop commands to the HDMI media player.
      operationId: controlVideoPlayback
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum:
                    - play
                    - pause
                    - resume
                    - stop
                url:
                  type: string
                  format: uri
                  nullable: true
                startSeconds:
                  type: number
                  format: float
                  nullable: true
      responses:
        '202':
          description: Playback command accepted.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/VideoJobAcknowledgement'
                  - type: object
                    required:
                      - playback
                    properties:
                      playback:
                        $ref: '#/components/schemas/VideoPlaybackState'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Playback command conflicts with current HDMI-CEC activity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/recordings/{recordingId}/export:
    post:
      tags:
        - Video
      summary: Request an export of a recording clip for download.
      description: Submit an export intent for a recorded segment, returning tracking metadata and a download URL when ready.
      operationId: exportVideoClip
      parameters:
        - name: recordingId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - startOffsetSeconds
                - endOffsetSeconds
              properties:
                startOffsetSeconds:
                  type: number
                  format: float
                endOffsetSeconds:
                  type: number
                  format: float
      responses:
        '202':
          description: Export request accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoClipExport'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/recordings:
    get:
      tags:
        - Video
      summary: Retrieve recording segments for the active video source.
      description: Retrieve recording segments for the active video source.
      operationId: getVideoRecordings
      responses:
        '200':
          description: Recording segments available for playback.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - generatedAt
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/VideoRecordingSegment'
                  total:
                    type: integer
                    format: int32
                  generatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /video/preview:
    post:
      tags:
        - Video
      summary: Generate a signed URL for a live video preview stream.
      description: Generate a signed URL for a live video preview stream.
      operationId: generateVideoPreview
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoPreviewRequest'
      responses:
        '200':
          description: Signed preview stream URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoPreviewSession'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/overview:
    get:
      tags:
        - Zigbee
      summary: Retrieve Zigbee hub state, devices, and quick actions.
      description: Retrieve Zigbee hub state, devices, and quick actions.
      operationId: getZigbeeOverview
      responses:
        '200':
          description: Zigbee overview payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeeState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/devices/{deviceId}/action:
    post:
      tags:
        - Zigbee
      summary: Execute a quick action on a Zigbee device.
      description: Execute a quick action on a Zigbee device.
      operationId: runZigbeeAction
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZigbeeActionRequest'
      responses:
        '202':
          description: Action accepted.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/pairing:
    post:
      tags:
        - Zigbee
      summary: Start Zigbee pairing mode for discovering new devices.
      description: Start Zigbee pairing mode for discovering new devices.
      operationId: startZigbeePairing
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZigbeePairingStartRequest'
      responses:
        '200':
          description: Pairing window started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeePairingState'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - Zigbee
      summary: Stop Zigbee pairing mode.
      description: Stop Zigbee pairing mode.
      operationId: stopZigbeePairing
      responses:
        '200':
          description: Pairing mode stopped.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeePairingState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/pairing/discovered:
    get:
      tags:
        - Zigbee
      summary: Poll for newly discovered Zigbee devices during pairing mode.
      description: Poll for newly discovered Zigbee devices during pairing mode.
      operationId: pollZigbeeDiscovered
      responses:
        '200':
          description: Discovered devices snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZigbeePairingState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /zigbee/pairing/{deviceId}:
    post:
      tags:
        - Zigbee
      summary: Confirm pairing of a discovered Zigbee device.
      description: Confirm pairing of a discovered Zigbee device.
      operationId: confirmZigbeePairing
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Pairing confirmation accepted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /camera/overview:
    get:
      tags:
        - Camera
      summary: Retrieve consolidated camera state for the operator dashboard.
      description: Retrieve consolidated camera state for the operator dashboard.
      operationId: getCameraOverview
      responses:
        '200':
          description: Camera overview payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '502':
          $ref: '#/components/responses/BadGatewayError'
        '504':
          $ref: '#/components/responses/GatewayTimeoutError'
        '500':
          $ref: '#/components/responses/InternalError'
  /camera/active:
    put:
      tags:
        - Camera
      summary: Select the active camera for preview and clip operations.
      description: Select the active camera for preview and clip operations.
      operationId: selectCamera
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraSelectionRequest'
      responses:
        '202':
          description: Camera selection accepted.
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /camera/events:
    get:
      tags:
        - Camera
      summary: List camera AI events with optional filters.
      description: Retrieve camera detections with support for time range, confidence, and tag filtering.
      operationId: listCameraEvents
      parameters:
        - name: start
          in: query
          description: Return events that occurred at or after this timestamp.
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          description: Return events that occurred at or before this timestamp.
          required: false
          schema:
            type: string
            format: date-time
        - name: cameraId
          in: query
          description: Restrict results to a single camera identifier.
          required: false
          schema:
            type: string
        - name: tags
          in: query
          style: form
          explode: false
          description: Comma separated list of tags that must be present on the event.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: minConfidence
          in: query
          description: Minimum detection confidence (0.0-1.0 or percentage).
          required: false
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: maxConfidence
          in: query
          description: Maximum detection confidence (0.0-1.0 or percentage).
          required: false
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: limit
          in: query
          description: Maximum number of events to return in a single response.
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: cursor
          in: query
          description: Cursor returned by a previous request for pagination.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Camera event collection.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraEventListResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /camera/events/{eventId}:
    get:
      tags:
        - Camera
      summary: Retrieve a single camera event with metadata and clip reference.
      description: Retrieve a single camera event with metadata and clip reference.
      operationId: getCameraEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Camera event detail response.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraEventDetailResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /camera/events/{eventId}/ack:
    post:
      tags:
        - Camera
      summary: Mark a camera event as acknowledged.
      description: Mark a camera event as acknowledged.
      operationId: acknowledgeCameraEvent
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Event acknowledgement accepted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /camera/events/{eventId}/clip:
    post:
      tags:
        - Camera
      summary: Generate or retrieve a clip for a camera event.
      description: Generate or retrieve a clip for a camera event.
      operationId: requestCameraClip
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CameraClipRequest'
      responses:
        '200':
          description: Clip URL response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CameraClipResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /camera/{cameraId}/refresh:
    post:
      tags:
        - Camera
      summary: Refresh the preview for a camera or the active camera when cameraId is 'active'.
      description: Refresh the preview for a camera or the active camera when cameraId is 'active'.
      operationId: refreshCamera
      parameters:
        - name: cameraId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Refresh request accepted.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '501':
          $ref: '#/components/responses/NotImplementedError'
        '500':
          $ref: '#/components/responses/InternalError'
  /logs:
    get:
      tags:
        - Logs
      summary: Retrieve a snapshot of recent logs with optional filtering.
      description: Retrieve a snapshot of recent logs with optional filtering.
      operationId: getLogs
      parameters:
        - $ref: '#/components/parameters/LogSourceParam'
        - $ref: '#/components/parameters/LogLevelParam'
        - $ref: '#/components/parameters/LogSearchParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/CursorParam'
      responses:
        '200':
          description: Logs snapshot response.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsSnapshot'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /logs/stream:
    get:
      tags:
        - Logs
      summary: Subscribe to the live event stream of log entries.
      description: Subscribe to the live event stream of log entries.
      operationId: streamLogs
      parameters:
        - $ref: '#/components/parameters/LogSourceParam'
        - $ref: '#/components/parameters/LogLevelParam'
        - $ref: '#/components/parameters/LogSearchParam'
        - $ref: '#/components/parameters/LogsStreamAccept'
      responses:
        '200':
          description: Server-sent events stream of log entries.
          headers:
            content-type:
              description: Always text/event-stream for live updates.
              schema:
                type: string
          content:
            text/event-stream:
              schema:
                type: string
                description: Serialized JSON log entries delivered as SSE data frames.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /logs/query:
    get:
      tags:
        - Logs
      summary: Retrieve a filtered slice of logs for operator review.
      description: Fetch recent log lines matching severity, device, and correlation filters for troubleshooting.
      operationId: queryLogs
      parameters:
        - $ref: '#/components/parameters/LogLevelParam'
        - name: deviceId
          in: query
          schema:
            type: string
          description: Filter to a specific device identifier.
        - name: correlationId
          in: query
          schema:
            type: string
          description: Filter by correlation identifier.
        - name: start
          in: query
          schema:
            type: string
            format: date-time
          description: Filter logs from this timestamp onwards (ISO 8601).
        - name: end
          in: query
          schema:
            type: string
            format: date-time
          description: Filter logs up to this timestamp (ISO 8601).
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 500
            default: 100
      responses:
        '200':
          description: Filtered log entries.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - fetchedAt
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogEntry'
                  total:
                    type: integer
                    format: int32
                  fetchedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalError'
  /logs/export:
    post:
      tags:
        - Logs
      summary: Create an export of logs matching a filter set.
      description: Queue a downloadable log export job using optional filters for offline analysis.
      operationId: exportLogs
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogsExportRequest'
      responses:
        '202':
          description: Export scheduled.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsExportResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /logs/jobs/{id}:
    get:
      tags:
        - Logs
      summary: Retrieve the status and download URL for a log export job.
      description: Check the processing status of a log export job and get the download URL when ready.
      operationId: getLogExportJob
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The export job ID returned from the /logs/export endpoint.
      responses:
        '200':
          description: Export job status and details.
          headers:
            x-correlation-id:
              $ref: '#/components/headers/CorrelationId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsExportResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings:
    get:
      tags:
        - Settings
      summary: Retrieve operator settings, proxy configuration, and pairing status.
      description: Retrieve operator settings, proxy configuration, and pairing status.
      operationId: getSettings
      responses:
        '200':
          description: Settings payload for the control plane.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/proxy:
    patch:
      tags:
        - Settings
      summary: Update proxy configuration settings.
      description: Update proxy configuration settings.
      operationId: updateProxySettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyUpdateRequest'
      responses:
        '202':
          description: Proxy update accepted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - proxy
                  - updatedAt
                properties:
                  proxy:
                    $ref: '#/components/schemas/ProxySettings'
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/api-token:
    post:
      tags:
        - Settings
      summary: Rotate the API bearer token used by operator integrations.
      description: Rotate the API bearer token used by operator integrations.
      operationId: rotateApiToken
      responses:
        '202':
          description: Token rotation accepted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - tokenPreview
                  - rotatedAt
                properties:
                  status:
                    type: string
                  tokenPreview:
                    type: string
                  rotatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/allowed-origins:
    put:
      tags:
        - Settings
      summary: Replace the list of allowed CORS origins for the API.
      description: Replace the list of allowed CORS origins for the API.
      operationId: updateAllowedOrigins
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AllowedOriginsRequest'
      responses:
        '202':
          description: Allowed origins updated.
          content:
            application/json:
              schema:
                type: object
                required:
                  - allowedOrigins
                  - updatedAt
                properties:
                  allowedOrigins:
                    type: array
                    items:
                      type: string
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/pairing/start:
    post:
      tags:
        - Settings
      summary: Start operator pairing flow for onboarding new devices.
      description: Start operator pairing flow for onboarding new devices.
      operationId: startSettingsPairing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PairingStartRequest'
      responses:
        '202':
          description: Pairing flow started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsPairingState'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/pairing/cancel:
    post:
      tags:
        - Settings
      summary: Cancel an in-progress pairing flow.
      description: Cancel an in-progress pairing flow.
      operationId: cancelSettingsPairing
      responses:
        '202':
          description: Pairing flow cancelled.
          content:
            application/json:
              schema:
                type: object
                required:
                  - cancelled
                  - updatedAt
                properties:
                  cancelled:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/pairing/{candidateId}/claim:
    post:
      tags:
        - Settings
      summary: Claim a discovered device and record pairing outcome.
      description: Claim a discovered device and record pairing outcome.
      operationId: claimPairingCandidate
      parameters:
        - name: candidateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PairingClaimRequest'
      responses:
        '202':
          description: Pairing candidate claim accepted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - accepted
                  - candidateId
                  - metadata
                  - updatedAt
                properties:
                  accepted:
                    type: boolean
                  candidateId:
                    type: string
                  metadata:
                    type: object
                    additionalProperties:
                      type: string
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/operators:
    get:
      tags:
        - Settings
      summary: List operator accounts and roles.
      description: Retrieve all operator accounts along with their roles and status metadata.
      operationId: listOperators
      responses:
        '200':
          description: Operator directory snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - Settings
      summary: Invite a new operator account with specified roles.
      description: Invite a new operator account with specified roles.
      operationId: inviteOperator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteOperatorRequest'
      responses:
        '201':
          description: Operator invited.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorAccount'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          description: Operator already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/operators/{operatorId}:
    put:
      tags:
        - Settings
      summary: Update an operator account.
      description: Modify operator roles or status for an existing account.
      operationId: updateOperator
      parameters:
        - name: operatorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatorUpdateRequest'
      responses:
        '200':
          description: Operator updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorAccount'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - Settings
      summary: Remove an operator account.
      description: Remove an operator account.
      operationId: removeOperator
      parameters:
        - name: operatorId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Operator removal accepted.
          content:
            application/json:
              schema:
                type: object
                required:
                  - removed
                  - operatorId
                  - updatedAt
                properties:
                  removed:
                    type: boolean
                  operatorId:
                    type: string
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
  /settings/security:
    get:
      tags:
        - Settings
      summary: Retrieve security escalation settings.
      description: Fetch night mode escalation preferences and alert channels.
      operationId: getSecuritySettings
      responses:
        '200':
          description: Security settings snapshot.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySettings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      tags:
        - Settings
      summary: Update security escalation settings.
      description: Adjust night mode escalation toggle and alert delivery channels.
      operationId: updateSecuritySettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityUpdateRequest'
      responses:
        '200':
          description: Updated security settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySettings'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalError'
