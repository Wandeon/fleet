import { access, mkdir, readFile, writeFile } from 'node:fs/promises';
import { dirname, join, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';
import openapiTS from 'openapi-typescript';

const __dirname = dirname(fileURLToPath(import.meta.url));
const projectRoot = resolve(__dirname, '..');
const repoRoot = resolve(projectRoot, '..', '..');
const specPath = resolve(repoRoot, 'apps', 'api', 'openapi.yaml');
const generatedDir = resolve(projectRoot, 'src', 'lib', 'api', 'generated');

async function exists(path) {
  try {
    await access(path);
    return true;
  } catch {
    return false;
  }
}

const header = `/* eslint-disable */\n/** Generated by scripts/generate-openapi.mjs. Do not edit manually. */\n`;

async function writePlaceholder() {
  await mkdir(generatedDir, { recursive: true });
  const stubTypes = `${header}export type paths = Record<string, never>;\nexport type components = Record<string, never>;\nexport type operations = Record<string, never>;\n`;
  const stubIndex = `${header}export type { paths, components, operations } from './types.js';\nexport const hasGeneratedClient = false as const;\n`;
  await writeFile(join(generatedDir, 'types.ts'), stubTypes, 'utf8');
  await writeFile(join(generatedDir, 'index.ts'), stubIndex, 'utf8');
  console.log('No OpenAPI spec found. Wrote placeholder types.');
}

if (!(await exists(specPath))) {
  await writePlaceholder();
  process.exit(0);
}

const spec = await readFile(specPath, 'utf8');
const output = await openapiTS(spec, { exportType: true });
await mkdir(generatedDir, { recursive: true });
await writeFile(join(generatedDir, 'types.ts'), `${header}${output}`, 'utf8');
const index = `${header}export type { paths, components, operations } from './types.js';\nexport const hasGeneratedClient = true as const;\n`;
await writeFile(join(generatedDir, 'index.ts'), index, 'utf8');
console.log('Generated OpenAPI types at src/lib/api/generated');
